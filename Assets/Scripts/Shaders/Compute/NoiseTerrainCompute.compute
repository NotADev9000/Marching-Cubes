#pragma kernel GenerateNoise

#include "Includes\FastNoiseLite.compute"
#include "Includes\MetricsCompute.hlsl"

RWStructuredBuffer<float> _Weights;

int _NoiseType;
int _FractalType;
int _Seed;
float _Amplitude;
float _Frequency;
int _Octaves;
float _WeightStrength;
float _Lacunarity;
float _Gain;
float _NoiseScale;
float _NoiseWeight;
float _GroundLevel;

[numthreads(numThreads, numThreads, numThreads)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    fnl_state noise = fnlCreateState();
    noise.noise_type = _NoiseType;
    noise.fractal_type = _FractalType;
    noise.seed = _Seed;
    noise.frequency = _Frequency;
    noise.octaves = _Octaves;
    noise.weighted_strength = _WeightStrength;
    noise.ping_pong_strength = _WeightStrength;
    noise.lacunarity = _Lacunarity;
    noise.gain = _Gain;

    // TERRAIN
    // don't scale y value to prevent the mesh moving up and down
    float3 pos = float3(id.x * _NoiseScale, id.y, id.z * _NoiseScale);
    float ground = -pos.y + (_GroundLevel * _ChunkSize);
    float n = ground + fnlGetNoise3D(noise, pos.x, pos.y, pos.z) * _Amplitude;
    n *= _NoiseWeight;
    n = sign(n) * pow(abs(n), 2);
    _Weights[indexFromCoord(id.x, id.y, id.z)] = n;
}
